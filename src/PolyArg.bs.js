// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function unwrap(v) {
  var match;
  switch (v.tag | 0) {
    case /* Em */0 :
        match = /* tuple */[
          v[0],
          "em"
        ];
        break;
    case /* Rem */1 :
        match = /* tuple */[
          v[0],
          "rem"
        ];
        break;
    case /* Px */2 :
        match = /* tuple */[
          v[0],
          "px"
        ];
        break;
    case /* Vw */3 :
        match = /* tuple */[
          v[0],
          "vw"
        ];
        break;
    case /* Vh */4 :
        match = /* tuple */[
          v[0],
          "vh"
        ];
        break;
    
  }
  return String(match[0]) + match[1];
}

function unwrapOpt(__x) {
  return Belt_Option.map(__x, unwrap);
}

var CssUnit = {
  unwrap: unwrap,
  unwrapOpt: unwrapOpt
};

function make(minWidth, maxWidth, minHeight, maxHeight, _children) {
  var tmp = { };
  var tmp$1 = Belt_Option.map(minWidth, unwrap);
  if (tmp$1 !== undefined) {
    tmp.minWidth = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = Belt_Option.map(maxWidth, unwrap);
  if (tmp$2 !== undefined) {
    tmp.maxWidth = Caml_option.valFromOption(tmp$2);
  }
  var tmp$3 = Belt_Option.map(minHeight, unwrap);
  if (tmp$3 !== undefined) {
    tmp.minHeight = Caml_option.valFromOption(tmp$3);
  }
  var tmp$4 = Belt_Option.map(maxHeight, unwrap);
  if (tmp$4 !== undefined) {
    tmp.maxHeight = Caml_option.valFromOption(tmp$4);
  }
  return tmp;
}

console.log(make(/* Em */Caml_chrome_debugger.variant("Em", 0, [45]), undefined, /* Rem */Caml_chrome_debugger.variant("Rem", 1, [105]), undefined, /* () */0));

exports.CssUnit = CssUnit;
exports.make = make;
/*  Not a pure module */
